What is a base case in recursion? Why do we need one? Do we always need one? 

It's the smaller version of a bigger problem that already has a predefined answer. Problems work down to the base case and can be solved from it. 

A base case is needed or else a stack overflow will happen. 

What exactly is a stack overflow? 

When the memory for a function is exhausted in a stack. 

Describe direct and indirect recursion 

direct: the funciton call the same function: fun(){fun()}

indirect: When funciton calls another funciton, which call th eoriginal funciton: 
fun(){fun_new(){fun()}}

what are the common HTTP methods? Whne are they used and what do they accomplish? 

Get- retreve data 
head- same as get, but tranfers status line and headers only 
post- send data to server 
delete - removes everyting of target resource 
connect - establishes tunnel to server identified by given uri 
options- describes availible http methods for server 
trace- performs a message loop-back along the path to the target resource. (used for development)

What is the different between funciton hoisting and variable hoisting? 

funciton are completely hoisted. 

let and const are not hoisted 

var is partially hoisted, mean that its declaration is hoisted but not its asseignment 

what is a pure function? Impure function? 

pure funcitons: return value depends solely on arguments. Predictable. No side effects.

impure functions: may call database. side effects. may overwrite items you pass to them. 

Why don't we want to modify our redux state?

Helps make redux fast. Also, the reducer needs to be a pure function. 

What is a state tree in the context of Redux? 

The state of the store that holds all the information 

Describe in detail what a redux reducer is. What makes it a pur funciton? 

It takes an action and previous state and returns a new state. Its a pure funciton bc it doesn't modify the initial state. 